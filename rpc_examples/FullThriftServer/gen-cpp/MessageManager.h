/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageManager_H
#define MessageManager_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MessageManagerIf {
 public:
  virtual ~MessageManagerIf() {}
  virtual void ping() = 0;
  virtual int32_t add_message(const message& m) = 0;
  virtual void get_message(message& _return, const int32_t uid) = 0;
  virtual void clear_list() = 0;
};

class MessageManagerIfFactory {
 public:
  typedef MessageManagerIf Handler;

  virtual ~MessageManagerIfFactory() {}

  virtual MessageManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MessageManagerIf* /* handler */) = 0;
};

class MessageManagerIfSingletonFactory : virtual public MessageManagerIfFactory {
 public:
  MessageManagerIfSingletonFactory(const boost::shared_ptr<MessageManagerIf>& iface) : iface_(iface) {}
  virtual ~MessageManagerIfSingletonFactory() {}

  virtual MessageManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MessageManagerIf* /* handler */) {}

 protected:
  boost::shared_ptr<MessageManagerIf> iface_;
};

class MessageManagerNull : virtual public MessageManagerIf {
 public:
  virtual ~MessageManagerNull() {}
  void ping() {
    return;
  }
  int32_t add_message(const message& /* m */) {
    int32_t _return = 0;
    return _return;
  }
  void get_message(message& /* _return */, const int32_t /* uid */) {
    return;
  }
  void clear_list() {
    return;
  }
};


class MessageManager_ping_args {
 public:

  MessageManager_ping_args(const MessageManager_ping_args&);
  MessageManager_ping_args& operator=(const MessageManager_ping_args&);
  MessageManager_ping_args() {
  }

  virtual ~MessageManager_ping_args() throw();

  bool operator == (const MessageManager_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageManager_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_ping_pargs {
 public:


  virtual ~MessageManager_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_ping_result {
 public:

  MessageManager_ping_result(const MessageManager_ping_result&);
  MessageManager_ping_result& operator=(const MessageManager_ping_result&);
  MessageManager_ping_result() {
  }

  virtual ~MessageManager_ping_result() throw();

  bool operator == (const MessageManager_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageManager_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_ping_presult {
 public:


  virtual ~MessageManager_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageManager_add_message_args__isset {
  _MessageManager_add_message_args__isset() : m(false) {}
  bool m :1;
} _MessageManager_add_message_args__isset;

class MessageManager_add_message_args {
 public:

  MessageManager_add_message_args(const MessageManager_add_message_args&);
  MessageManager_add_message_args& operator=(const MessageManager_add_message_args&);
  MessageManager_add_message_args() {
  }

  virtual ~MessageManager_add_message_args() throw();
  message m;

  _MessageManager_add_message_args__isset __isset;

  void __set_m(const message& val);

  bool operator == (const MessageManager_add_message_args & rhs) const
  {
    if (!(m == rhs.m))
      return false;
    return true;
  }
  bool operator != (const MessageManager_add_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_add_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_add_message_pargs {
 public:


  virtual ~MessageManager_add_message_pargs() throw();
  const message* m;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageManager_add_message_result__isset {
  _MessageManager_add_message_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageManager_add_message_result__isset;

class MessageManager_add_message_result {
 public:

  MessageManager_add_message_result(const MessageManager_add_message_result&);
  MessageManager_add_message_result& operator=(const MessageManager_add_message_result&);
  MessageManager_add_message_result() : success(0) {
  }

  virtual ~MessageManager_add_message_result() throw();
  int32_t success;
  InvalidValueException e;

  _MessageManager_add_message_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const MessageManager_add_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageManager_add_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_add_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageManager_add_message_presult__isset {
  _MessageManager_add_message_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageManager_add_message_presult__isset;

class MessageManager_add_message_presult {
 public:


  virtual ~MessageManager_add_message_presult() throw();
  int32_t* success;
  InvalidValueException e;

  _MessageManager_add_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageManager_get_message_args__isset {
  _MessageManager_get_message_args__isset() : uid(false) {}
  bool uid :1;
} _MessageManager_get_message_args__isset;

class MessageManager_get_message_args {
 public:

  MessageManager_get_message_args(const MessageManager_get_message_args&);
  MessageManager_get_message_args& operator=(const MessageManager_get_message_args&);
  MessageManager_get_message_args() : uid(0) {
  }

  virtual ~MessageManager_get_message_args() throw();
  int32_t uid;

  _MessageManager_get_message_args__isset __isset;

  void __set_uid(const int32_t val);

  bool operator == (const MessageManager_get_message_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const MessageManager_get_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_get_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_get_message_pargs {
 public:


  virtual ~MessageManager_get_message_pargs() throw();
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageManager_get_message_result__isset {
  _MessageManager_get_message_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageManager_get_message_result__isset;

class MessageManager_get_message_result {
 public:

  MessageManager_get_message_result(const MessageManager_get_message_result&);
  MessageManager_get_message_result& operator=(const MessageManager_get_message_result&);
  MessageManager_get_message_result() {
  }

  virtual ~MessageManager_get_message_result() throw();
  message success;
  InvalidValueException e;

  _MessageManager_get_message_result__isset __isset;

  void __set_success(const message& val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const MessageManager_get_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageManager_get_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_get_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageManager_get_message_presult__isset {
  _MessageManager_get_message_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageManager_get_message_presult__isset;

class MessageManager_get_message_presult {
 public:


  virtual ~MessageManager_get_message_presult() throw();
  message* success;
  InvalidValueException e;

  _MessageManager_get_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageManager_clear_list_args {
 public:

  MessageManager_clear_list_args(const MessageManager_clear_list_args&);
  MessageManager_clear_list_args& operator=(const MessageManager_clear_list_args&);
  MessageManager_clear_list_args() {
  }

  virtual ~MessageManager_clear_list_args() throw();

  bool operator == (const MessageManager_clear_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageManager_clear_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageManager_clear_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageManager_clear_list_pargs {
 public:


  virtual ~MessageManager_clear_list_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MessageManagerClient : virtual public MessageManagerIf {
 public:
  MessageManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t add_message(const message& m);
  void send_add_message(const message& m);
  int32_t recv_add_message();
  void get_message(message& _return, const int32_t uid);
  void send_get_message(const int32_t uid);
  void recv_get_message(message& _return);
  void clear_list();
  void send_clear_list();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MessageManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MessageManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageManagerProcessor(boost::shared_ptr<MessageManagerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MessageManagerProcessor::process_ping;
    processMap_["add_message"] = &MessageManagerProcessor::process_add_message;
    processMap_["get_message"] = &MessageManagerProcessor::process_get_message;
    processMap_["clear_list"] = &MessageManagerProcessor::process_clear_list;
  }

  virtual ~MessageManagerProcessor() {}
};

class MessageManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageManagerProcessorFactory(const ::boost::shared_ptr< MessageManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MessageManagerIfFactory > handlerFactory_;
};

class MessageManagerMultiface : virtual public MessageManagerIf {
 public:
  MessageManagerMultiface(std::vector<boost::shared_ptr<MessageManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MessageManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MessageManagerIf> > ifaces_;
  MessageManagerMultiface() {}
  void add(boost::shared_ptr<MessageManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add_message(const message& m) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_message(m);
    }
    return ifaces_[i]->add_message(m);
  }

  void get_message(message& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_message(_return, uid);
    }
    ifaces_[i]->get_message(_return, uid);
    return;
  }

  void clear_list() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_list();
    }
    ifaces_[i]->clear_list();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MessageManagerConcurrentClient : virtual public MessageManagerIf {
 public:
  MessageManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add_message(const message& m);
  int32_t send_add_message(const message& m);
  int32_t recv_add_message(const int32_t seqid);
  void get_message(message& _return, const int32_t uid);
  int32_t send_get_message(const int32_t uid);
  void recv_get_message(message& _return, const int32_t seqid);
  void clear_list();
  void send_clear_list();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
