/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class message;

typedef struct _message__isset {
  _message__isset() : uid(false), line(false) {}
  bool uid :1;
  bool line :1;
} _message__isset;

class message : public virtual ::apache::thrift::TBase {
 public:

  message(const message&);
  message& operator=(const message&);
  message() : uid(0), line() {
  }

  virtual ~message() throw();
  int32_t uid;
  std::string line;

  _message__isset __isset;

  void __set_uid(const int32_t val);

  void __set_line(const std::string& val);

  bool operator == (const message & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(line == rhs.line))
      return false;
    return true;
  }
  bool operator != (const message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(message &a, message &b);

inline std::ostream& operator<<(std::ostream& out, const message& obj)
{
  obj.printTo(out);
  return out;
}



#endif
